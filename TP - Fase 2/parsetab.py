
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftCONCATleft+-left*/ALEATORIO CONCAT ENTRADA ESCREVER FUNCAO IDENTIFIER NUMBER STRINGprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : assignment_statement\n                 | command_statement\n                 | function_declarationfunction_declaration : FUNCAO IDENTIFIER '(' parameter_list ')' ',' ':' expression ';' parameter_list : IDENTIFIER\n                      | parameter_list ',' IDENTIFIER\n                      | emptyassignment_statement : IDENTIFIER '=' expression ';' command_statement : ESCREVER '(' expression ')' ';'\n                         | ESCREVER expression ';'\n                         | ALEATORIO '(' ')' ';'\n                         | ALEATORIO '(' expression ')' ';' expression : expression '+' expression\n                  | expression '-' expression\n                  | expression '*' expression\n                  | expression '/' expressionexpression : expression CONCAT expressionexpression : '(' expression ')' expression : NUMBERexpression : STRINGexpression : IDENTIFIERexpression : IDENTIFIER '(' argument_list ')' expression : '[' element_list ']' element_list : expression\n                    | element_list ',' expression\n                    | emptyargument_list : expression\n                     | argument_list ',' expression\n                     | emptyexpression : ENTRADA '(' ')' expression : ALEATORIO '(' expression ')' empty :"
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,8,10,11,12,13,18,21,24,26,27,28,29,30,31,32,37,40,41,53,56,62,64,67,69,73,75,],[7,7,-3,-4,-5,-6,17,22,-2,17,17,17,17,17,-13,17,17,17,17,17,17,17,58,-11,17,-14,-12,17,-15,72,17,-7,]),'ESCREVER':([0,2,3,4,5,6,11,26,41,56,62,67,75,],[8,8,-3,-4,-5,-6,-2,-13,-11,-14,-12,-15,-7,]),'ALEATORIO':([0,2,3,4,5,6,8,11,12,13,18,21,24,26,27,28,29,30,31,32,37,41,53,56,62,64,67,73,75,],[9,9,-3,-4,-5,-6,20,-2,20,20,20,20,20,-13,20,20,20,20,20,20,20,-11,20,-14,-12,20,-15,20,-7,]),'FUNCAO':([0,2,3,4,5,6,11,26,41,56,62,67,75,],[10,10,-3,-4,-5,-6,-2,-13,-11,-14,-12,-15,-7,]),'$end':([1,2,3,4,5,6,11,26,41,56,62,67,75,],[0,-1,-3,-4,-5,-6,-2,-13,-11,-14,-12,-15,-7,]),'=':([7,],[12,]),'(':([8,9,12,13,17,18,19,20,21,22,24,27,28,29,30,31,32,37,53,64,73,],[13,21,24,24,32,24,36,37,24,40,24,24,24,24,24,24,24,24,24,24,24,]),'NUMBER':([8,12,13,18,21,24,27,28,29,30,31,32,37,53,64,73,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'STRING':([8,12,13,18,21,24,27,28,29,30,31,32,37,53,64,73,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'[':([8,12,13,18,21,24,27,28,29,30,31,32,37,53,64,73,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ENTRADA':([8,12,13,18,21,24,27,28,29,30,31,32,37,53,64,73,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),';':([14,15,16,17,23,38,43,44,45,46,47,48,52,54,57,61,63,66,74,],[26,-22,-23,-24,41,56,62,-16,-17,-18,-19,-20,-26,-33,67,-21,-25,-34,75,]),'+':([14,15,16,17,23,25,34,39,42,43,44,45,46,47,48,50,52,54,55,61,63,65,66,70,74,],[27,-22,-23,-24,27,27,27,27,27,-21,-16,-17,-18,-19,27,27,-26,-33,27,-21,-25,27,-34,27,27,]),'-':([14,15,16,17,23,25,34,39,42,43,44,45,46,47,48,50,52,54,55,61,63,65,66,70,74,],[28,-22,-23,-24,28,28,28,28,28,-21,-16,-17,-18,-19,28,28,-26,-33,28,-21,-25,28,-34,28,28,]),'*':([14,15,16,17,23,25,34,39,42,43,44,45,46,47,48,50,52,54,55,61,63,65,66,70,74,],[29,-22,-23,-24,29,29,29,29,29,-21,29,29,-18,-19,29,29,-26,-33,29,-21,-25,29,-34,29,29,]),'/':([14,15,16,17,23,25,34,39,42,43,44,45,46,47,48,50,52,54,55,61,63,65,66,70,74,],[30,-22,-23,-24,30,30,30,30,30,-21,30,30,-18,-19,30,30,-26,-33,30,-21,-25,30,-34,30,30,]),'CONCAT':([14,15,16,17,23,25,34,39,42,43,44,45,46,47,48,50,52,54,55,61,63,65,66,70,74,],[31,-22,-23,-24,31,31,31,31,31,-21,-16,-17,-18,-19,-20,31,-26,-33,31,-21,-25,31,-34,31,31,]),')':([15,16,17,21,25,32,36,39,40,42,44,45,46,47,48,49,50,51,52,54,55,58,59,60,61,63,66,70,72,],[-22,-23,-24,38,43,-35,54,57,-35,61,-16,-17,-18,-19,-20,63,-30,-32,-26,-33,66,-8,68,-10,-21,-25,-34,-31,-9,]),']':([15,16,17,18,33,34,35,44,45,46,47,48,52,54,61,63,65,66,],[-22,-23,-24,-35,52,-27,-29,-16,-17,-18,-19,-20,-26,-33,-21,-25,-28,-34,]),',':([15,16,17,18,32,33,34,35,40,44,45,46,47,48,49,50,51,52,54,58,59,60,61,63,65,66,68,70,72,],[-22,-23,-24,-35,-35,53,-27,-29,-35,-16,-17,-18,-19,-20,64,-30,-32,-26,-33,-8,69,-10,-21,-25,-28,-34,71,-31,-9,]),':':([71,],[73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,11,]),'assignment_statement':([0,2,],[4,4,]),'command_statement':([0,2,],[5,5,]),'function_declaration':([0,2,],[6,6,]),'expression':([8,12,13,18,21,24,27,28,29,30,31,32,37,53,64,73,],[14,23,25,34,39,42,44,45,46,47,48,50,55,65,70,74,]),'element_list':([18,],[33,]),'empty':([18,32,40,],[35,51,60,]),'argument_list':([32,],[49,]),'parameter_list':([40,],[59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','FCAGrammar.py',16),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','FCAGrammar.py',20),
  ('statement_list -> statement','statement_list',1,'p_statement_list','FCAGrammar.py',21),
  ('statement -> assignment_statement','statement',1,'p_statement','FCAGrammar.py',28),
  ('statement -> command_statement','statement',1,'p_statement','FCAGrammar.py',29),
  ('statement -> function_declaration','statement',1,'p_statement','FCAGrammar.py',30),
  ('function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) , : expression ;','function_declaration',9,'p_function_declaration','FCAGrammar.py',34),
  ('parameter_list -> IDENTIFIER','parameter_list',1,'p_parameter_list','FCAGrammar.py',44),
  ('parameter_list -> parameter_list , IDENTIFIER','parameter_list',3,'p_parameter_list','FCAGrammar.py',45),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','FCAGrammar.py',46),
  ('assignment_statement -> IDENTIFIER = expression ;','assignment_statement',4,'p_assignment_statement','FCAGrammar.py',53),
  ('command_statement -> ESCREVER ( expression ) ;','command_statement',5,'p_command_statement','FCAGrammar.py',57),
  ('command_statement -> ESCREVER expression ;','command_statement',3,'p_command_statement','FCAGrammar.py',58),
  ('command_statement -> ALEATORIO ( ) ;','command_statement',4,'p_command_statement','FCAGrammar.py',59),
  ('command_statement -> ALEATORIO ( expression ) ;','command_statement',5,'p_command_statement','FCAGrammar.py',60),
  ('expression -> expression + expression','expression',3,'p_expression_binop','FCAGrammar.py',73),
  ('expression -> expression - expression','expression',3,'p_expression_binop','FCAGrammar.py',74),
  ('expression -> expression * expression','expression',3,'p_expression_binop','FCAGrammar.py',75),
  ('expression -> expression / expression','expression',3,'p_expression_binop','FCAGrammar.py',76),
  ('expression -> expression CONCAT expression','expression',3,'p_expression_concat','FCAGrammar.py',80),
  ('expression -> ( expression )','expression',3,'p_expression_group','FCAGrammar.py',84),
  ('expression -> NUMBER','expression',1,'p_expression_number','FCAGrammar.py',88),
  ('expression -> STRING','expression',1,'p_expression_string','FCAGrammar.py',92),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','FCAGrammar.py',96),
  ('expression -> IDENTIFIER ( argument_list )','expression',4,'p_expression_function_call','FCAGrammar.py',100),
  ('expression -> [ element_list ]','expression',3,'p_expression_list','FCAGrammar.py',104),
  ('element_list -> expression','element_list',1,'p_element_list','FCAGrammar.py',108),
  ('element_list -> element_list , expression','element_list',3,'p_element_list','FCAGrammar.py',109),
  ('element_list -> empty','element_list',1,'p_element_list','FCAGrammar.py',110),
  ('argument_list -> expression','argument_list',1,'p_argument_list','FCAGrammar.py',117),
  ('argument_list -> argument_list , expression','argument_list',3,'p_argument_list','FCAGrammar.py',118),
  ('argument_list -> empty','argument_list',1,'p_argument_list','FCAGrammar.py',119),
  ('expression -> ENTRADA ( )','expression',3,'p_expression_entrada','FCAGrammar.py',126),
  ('expression -> ALEATORIO ( expression )','expression',4,'p_expression_aleatorio','FCAGrammar.py',130),
  ('empty -> <empty>','empty',0,'p_empty','FCAGrammar.py',134),
]
