Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> assignment_statement
Rule 5     statement -> command_statement
Rule 6     statement -> function_declaration
Rule 7     function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) , : expression ;
Rule 8     parameter_list -> IDENTIFIER
Rule 9     parameter_list -> parameter_list , IDENTIFIER
Rule 10    parameter_list -> empty
Rule 11    assignment_statement -> IDENTIFIER = expression ;
Rule 12    command_statement -> ESCREVER ( expression ) ;
Rule 13    command_statement -> ESCREVER expression ;
Rule 14    command_statement -> ALEATORIO ( ) ;
Rule 15    command_statement -> ALEATORIO ( expression ) ;
Rule 16    expression -> expression + expression
Rule 17    expression -> expression - expression
Rule 18    expression -> expression * expression
Rule 19    expression -> expression / expression
Rule 20    expression -> expression CONCAT expression
Rule 21    expression -> ( expression )
Rule 22    expression -> NUMBER
Rule 23    expression -> STRING
Rule 24    expression -> IDENTIFIER
Rule 25    expression -> IDENTIFIER ( argument_list )
Rule 26    expression -> [ element_list ]
Rule 27    element_list -> expression
Rule 28    element_list -> element_list , expression
Rule 29    element_list -> empty
Rule 30    argument_list -> expression
Rule 31    argument_list -> argument_list , expression
Rule 32    argument_list -> empty
Rule 33    expression -> ENTRADA ( )
Rule 34    expression -> ALEATORIO ( expression )
Rule 35    empty -> <empty>

Terminals, with rules where they appear

(                    : 7 12 14 15 21 25 33 34
)                    : 7 12 14 15 21 25 33 34
*                    : 18
+                    : 16
,                    : 7 9 28 31
-                    : 17
/                    : 19
:                    : 7
;                    : 7 11 12 13 14 15
=                    : 11
ALEATORIO            : 14 15 34
CONCAT               : 20
ENTRADA              : 33
ESCREVER             : 12 13
FUNCAO               : 7
IDENTIFIER           : 7 8 9 11 24 25
NUMBER               : 22
STRING               : 23
[                    : 26
]                    : 26
error                : 

Nonterminals, with rules where they appear

argument_list        : 25 31
assignment_statement : 4
command_statement    : 5
element_list         : 26 28
empty                : 10 29 32
expression           : 7 11 12 13 15 16 16 17 17 18 18 19 19 20 20 21 27 28 30 31 34
function_declaration : 6
parameter_list       : 7 9
program              : 0
statement            : 2 3
statement_list       : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . assignment_statement
    (5) statement -> . command_statement
    (6) statement -> . function_declaration
    (11) assignment_statement -> . IDENTIFIER = expression ;
    (12) command_statement -> . ESCREVER ( expression ) ;
    (13) command_statement -> . ESCREVER expression ;
    (14) command_statement -> . ALEATORIO ( ) ;
    (15) command_statement -> . ALEATORIO ( expression ) ;
    (7) function_declaration -> . FUNCAO IDENTIFIER ( parameter_list ) , : expression ;

    IDENTIFIER      shift and go to state 7
    ESCREVER        shift and go to state 8
    ALEATORIO       shift and go to state 9
    FUNCAO          shift and go to state 10

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment_statement           shift and go to state 4
    command_statement              shift and go to state 5
    function_declaration           shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . assignment_statement
    (5) statement -> . command_statement
    (6) statement -> . function_declaration
    (11) assignment_statement -> . IDENTIFIER = expression ;
    (12) command_statement -> . ESCREVER ( expression ) ;
    (13) command_statement -> . ESCREVER expression ;
    (14) command_statement -> . ALEATORIO ( ) ;
    (15) command_statement -> . ALEATORIO ( expression ) ;
    (7) function_declaration -> . FUNCAO IDENTIFIER ( parameter_list ) , : expression ;

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 7
    ESCREVER        shift and go to state 8
    ALEATORIO       shift and go to state 9
    FUNCAO          shift and go to state 10

    statement                      shift and go to state 11
    assignment_statement           shift and go to state 4
    command_statement              shift and go to state 5
    function_declaration           shift and go to state 6

state 3

    (3) statement_list -> statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    ESCREVER        reduce using rule 3 (statement_list -> statement .)
    ALEATORIO       reduce using rule 3 (statement_list -> statement .)
    FUNCAO          reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> assignment_statement .

    IDENTIFIER      reduce using rule 4 (statement -> assignment_statement .)
    ESCREVER        reduce using rule 4 (statement -> assignment_statement .)
    ALEATORIO       reduce using rule 4 (statement -> assignment_statement .)
    FUNCAO          reduce using rule 4 (statement -> assignment_statement .)
    $end            reduce using rule 4 (statement -> assignment_statement .)


state 5

    (5) statement -> command_statement .

    IDENTIFIER      reduce using rule 5 (statement -> command_statement .)
    ESCREVER        reduce using rule 5 (statement -> command_statement .)
    ALEATORIO       reduce using rule 5 (statement -> command_statement .)
    FUNCAO          reduce using rule 5 (statement -> command_statement .)
    $end            reduce using rule 5 (statement -> command_statement .)


state 6

    (6) statement -> function_declaration .

    IDENTIFIER      reduce using rule 6 (statement -> function_declaration .)
    ESCREVER        reduce using rule 6 (statement -> function_declaration .)
    ALEATORIO       reduce using rule 6 (statement -> function_declaration .)
    FUNCAO          reduce using rule 6 (statement -> function_declaration .)
    $end            reduce using rule 6 (statement -> function_declaration .)


state 7

    (11) assignment_statement -> IDENTIFIER . = expression ;

    =               shift and go to state 12


state 8

    (12) command_statement -> ESCREVER . ( expression ) ;
    (13) command_statement -> ESCREVER . expression ;
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 13
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 14

state 9

    (14) command_statement -> ALEATORIO . ( ) ;
    (15) command_statement -> ALEATORIO . ( expression ) ;

    (               shift and go to state 21


state 10

    (7) function_declaration -> FUNCAO . IDENTIFIER ( parameter_list ) , : expression ;

    IDENTIFIER      shift and go to state 22


state 11

    (2) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    ESCREVER        reduce using rule 2 (statement_list -> statement_list statement .)
    ALEATORIO       reduce using rule 2 (statement_list -> statement_list statement .)
    FUNCAO          reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)


state 12

    (11) assignment_statement -> IDENTIFIER = . expression ;
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 23

state 13

    (12) command_statement -> ESCREVER ( . expression ) ;
    (21) expression -> ( . expression )
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 25

state 14

    (13) command_statement -> ESCREVER expression . ;
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    ;               shift and go to state 26
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    CONCAT          shift and go to state 31


state 15

    (22) expression -> NUMBER .

    ;               reduce using rule 22 (expression -> NUMBER .)
    +               reduce using rule 22 (expression -> NUMBER .)
    -               reduce using rule 22 (expression -> NUMBER .)
    *               reduce using rule 22 (expression -> NUMBER .)
    /               reduce using rule 22 (expression -> NUMBER .)
    CONCAT          reduce using rule 22 (expression -> NUMBER .)
    )               reduce using rule 22 (expression -> NUMBER .)
    ]               reduce using rule 22 (expression -> NUMBER .)
    ,               reduce using rule 22 (expression -> NUMBER .)


state 16

    (23) expression -> STRING .

    ;               reduce using rule 23 (expression -> STRING .)
    +               reduce using rule 23 (expression -> STRING .)
    -               reduce using rule 23 (expression -> STRING .)
    *               reduce using rule 23 (expression -> STRING .)
    /               reduce using rule 23 (expression -> STRING .)
    CONCAT          reduce using rule 23 (expression -> STRING .)
    )               reduce using rule 23 (expression -> STRING .)
    ]               reduce using rule 23 (expression -> STRING .)
    ,               reduce using rule 23 (expression -> STRING .)


state 17

    (24) expression -> IDENTIFIER .
    (25) expression -> IDENTIFIER . ( argument_list )

    ;               reduce using rule 24 (expression -> IDENTIFIER .)
    +               reduce using rule 24 (expression -> IDENTIFIER .)
    -               reduce using rule 24 (expression -> IDENTIFIER .)
    *               reduce using rule 24 (expression -> IDENTIFIER .)
    /               reduce using rule 24 (expression -> IDENTIFIER .)
    CONCAT          reduce using rule 24 (expression -> IDENTIFIER .)
    )               reduce using rule 24 (expression -> IDENTIFIER .)
    ]               reduce using rule 24 (expression -> IDENTIFIER .)
    ,               reduce using rule 24 (expression -> IDENTIFIER .)
    (               shift and go to state 32


state 18

    (26) expression -> [ . element_list ]
    (27) element_list -> . expression
    (28) element_list -> . element_list , expression
    (29) element_list -> . empty
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )
    (35) empty -> .

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20
    ]               reduce using rule 35 (empty -> .)
    ,               reduce using rule 35 (empty -> .)

    element_list                   shift and go to state 33
    expression                     shift and go to state 34
    empty                          shift and go to state 35

state 19

    (33) expression -> ENTRADA . ( )

    (               shift and go to state 36


state 20

    (34) expression -> ALEATORIO . ( expression )

    (               shift and go to state 37


state 21

    (14) command_statement -> ALEATORIO ( . ) ;
    (15) command_statement -> ALEATORIO ( . expression ) ;
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    )               shift and go to state 38
    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 39

state 22

    (7) function_declaration -> FUNCAO IDENTIFIER . ( parameter_list ) , : expression ;

    (               shift and go to state 40


state 23

    (11) assignment_statement -> IDENTIFIER = expression . ;
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    ;               shift and go to state 41
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    CONCAT          shift and go to state 31


state 24

    (21) expression -> ( . expression )
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 42

state 25

    (12) command_statement -> ESCREVER ( expression . ) ;
    (21) expression -> ( expression . )
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    )               shift and go to state 43
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    CONCAT          shift and go to state 31


state 26

    (13) command_statement -> ESCREVER expression ; .

    IDENTIFIER      reduce using rule 13 (command_statement -> ESCREVER expression ; .)
    ESCREVER        reduce using rule 13 (command_statement -> ESCREVER expression ; .)
    ALEATORIO       reduce using rule 13 (command_statement -> ESCREVER expression ; .)
    FUNCAO          reduce using rule 13 (command_statement -> ESCREVER expression ; .)
    $end            reduce using rule 13 (command_statement -> ESCREVER expression ; .)


state 27

    (16) expression -> expression + . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 44

state 28

    (17) expression -> expression - . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 45

state 29

    (18) expression -> expression * . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 46

state 30

    (19) expression -> expression / . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 47

state 31

    (20) expression -> expression CONCAT . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 48

state 32

    (25) expression -> IDENTIFIER ( . argument_list )
    (30) argument_list -> . expression
    (31) argument_list -> . argument_list , expression
    (32) argument_list -> . empty
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )
    (35) empty -> .

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20
    )               reduce using rule 35 (empty -> .)
    ,               reduce using rule 35 (empty -> .)

    argument_list                  shift and go to state 49
    expression                     shift and go to state 50
    empty                          shift and go to state 51

state 33

    (26) expression -> [ element_list . ]
    (28) element_list -> element_list . , expression

    ]               shift and go to state 52
    ,               shift and go to state 53


state 34

    (27) element_list -> expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    ]               reduce using rule 27 (element_list -> expression .)
    ,               reduce using rule 27 (element_list -> expression .)
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    CONCAT          shift and go to state 31


state 35

    (29) element_list -> empty .

    ]               reduce using rule 29 (element_list -> empty .)
    ,               reduce using rule 29 (element_list -> empty .)


state 36

    (33) expression -> ENTRADA ( . )

    )               shift and go to state 54


state 37

    (34) expression -> ALEATORIO ( . expression )
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 55

state 38

    (14) command_statement -> ALEATORIO ( ) . ;

    ;               shift and go to state 56


state 39

    (15) command_statement -> ALEATORIO ( expression . ) ;
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    )               shift and go to state 57
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    CONCAT          shift and go to state 31


state 40

    (7) function_declaration -> FUNCAO IDENTIFIER ( . parameter_list ) , : expression ;
    (8) parameter_list -> . IDENTIFIER
    (9) parameter_list -> . parameter_list , IDENTIFIER
    (10) parameter_list -> . empty
    (35) empty -> .

    IDENTIFIER      shift and go to state 58
    )               reduce using rule 35 (empty -> .)
    ,               reduce using rule 35 (empty -> .)

    parameter_list                 shift and go to state 59
    empty                          shift and go to state 60

state 41

    (11) assignment_statement -> IDENTIFIER = expression ; .

    IDENTIFIER      reduce using rule 11 (assignment_statement -> IDENTIFIER = expression ; .)
    ESCREVER        reduce using rule 11 (assignment_statement -> IDENTIFIER = expression ; .)
    ALEATORIO       reduce using rule 11 (assignment_statement -> IDENTIFIER = expression ; .)
    FUNCAO          reduce using rule 11 (assignment_statement -> IDENTIFIER = expression ; .)
    $end            reduce using rule 11 (assignment_statement -> IDENTIFIER = expression ; .)


state 42

    (21) expression -> ( expression . )
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    )               shift and go to state 61
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    CONCAT          shift and go to state 31


state 43

    (12) command_statement -> ESCREVER ( expression ) . ;
    (21) expression -> ( expression ) .

  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 62
    +               reduce using rule 21 (expression -> ( expression ) .)
    -               reduce using rule 21 (expression -> ( expression ) .)
    *               reduce using rule 21 (expression -> ( expression ) .)
    /               reduce using rule 21 (expression -> ( expression ) .)
    CONCAT          reduce using rule 21 (expression -> ( expression ) .)

  ! ;               [ reduce using rule 21 (expression -> ( expression ) .) ]


state 44

    (16) expression -> expression + expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    ;               reduce using rule 16 (expression -> expression + expression .)
    +               reduce using rule 16 (expression -> expression + expression .)
    -               reduce using rule 16 (expression -> expression + expression .)
    CONCAT          reduce using rule 16 (expression -> expression + expression .)
    )               reduce using rule 16 (expression -> expression + expression .)
    ]               reduce using rule 16 (expression -> expression + expression .)
    ,               reduce using rule 16 (expression -> expression + expression .)
    *               shift and go to state 29
    /               shift and go to state 30

  ! *               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! CONCAT          [ shift and go to state 31 ]


state 45

    (17) expression -> expression - expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    ;               reduce using rule 17 (expression -> expression - expression .)
    +               reduce using rule 17 (expression -> expression - expression .)
    -               reduce using rule 17 (expression -> expression - expression .)
    CONCAT          reduce using rule 17 (expression -> expression - expression .)
    )               reduce using rule 17 (expression -> expression - expression .)
    ]               reduce using rule 17 (expression -> expression - expression .)
    ,               reduce using rule 17 (expression -> expression - expression .)
    *               shift and go to state 29
    /               shift and go to state 30

  ! *               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! CONCAT          [ shift and go to state 31 ]


state 46

    (18) expression -> expression * expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    ;               reduce using rule 18 (expression -> expression * expression .)
    +               reduce using rule 18 (expression -> expression * expression .)
    -               reduce using rule 18 (expression -> expression * expression .)
    *               reduce using rule 18 (expression -> expression * expression .)
    /               reduce using rule 18 (expression -> expression * expression .)
    CONCAT          reduce using rule 18 (expression -> expression * expression .)
    )               reduce using rule 18 (expression -> expression * expression .)
    ]               reduce using rule 18 (expression -> expression * expression .)
    ,               reduce using rule 18 (expression -> expression * expression .)

  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! *               [ shift and go to state 29 ]
  ! /               [ shift and go to state 30 ]
  ! CONCAT          [ shift and go to state 31 ]


state 47

    (19) expression -> expression / expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    ;               reduce using rule 19 (expression -> expression / expression .)
    +               reduce using rule 19 (expression -> expression / expression .)
    -               reduce using rule 19 (expression -> expression / expression .)
    *               reduce using rule 19 (expression -> expression / expression .)
    /               reduce using rule 19 (expression -> expression / expression .)
    CONCAT          reduce using rule 19 (expression -> expression / expression .)
    )               reduce using rule 19 (expression -> expression / expression .)
    ]               reduce using rule 19 (expression -> expression / expression .)
    ,               reduce using rule 19 (expression -> expression / expression .)

  ! +               [ shift and go to state 27 ]
  ! -               [ shift and go to state 28 ]
  ! *               [ shift and go to state 29 ]
  ! /               [ shift and go to state 30 ]
  ! CONCAT          [ shift and go to state 31 ]


state 48

    (20) expression -> expression CONCAT expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    ;               reduce using rule 20 (expression -> expression CONCAT expression .)
    CONCAT          reduce using rule 20 (expression -> expression CONCAT expression .)
    )               reduce using rule 20 (expression -> expression CONCAT expression .)
    ]               reduce using rule 20 (expression -> expression CONCAT expression .)
    ,               reduce using rule 20 (expression -> expression CONCAT expression .)
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30

  ! +               [ reduce using rule 20 (expression -> expression CONCAT expression .) ]
  ! -               [ reduce using rule 20 (expression -> expression CONCAT expression .) ]
  ! *               [ reduce using rule 20 (expression -> expression CONCAT expression .) ]
  ! /               [ reduce using rule 20 (expression -> expression CONCAT expression .) ]
  ! CONCAT          [ shift and go to state 31 ]


state 49

    (25) expression -> IDENTIFIER ( argument_list . )
    (31) argument_list -> argument_list . , expression

    )               shift and go to state 63
    ,               shift and go to state 64


state 50

    (30) argument_list -> expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    )               reduce using rule 30 (argument_list -> expression .)
    ,               reduce using rule 30 (argument_list -> expression .)
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    CONCAT          shift and go to state 31


state 51

    (32) argument_list -> empty .

    )               reduce using rule 32 (argument_list -> empty .)
    ,               reduce using rule 32 (argument_list -> empty .)


state 52

    (26) expression -> [ element_list ] .

    ;               reduce using rule 26 (expression -> [ element_list ] .)
    +               reduce using rule 26 (expression -> [ element_list ] .)
    -               reduce using rule 26 (expression -> [ element_list ] .)
    *               reduce using rule 26 (expression -> [ element_list ] .)
    /               reduce using rule 26 (expression -> [ element_list ] .)
    CONCAT          reduce using rule 26 (expression -> [ element_list ] .)
    )               reduce using rule 26 (expression -> [ element_list ] .)
    ]               reduce using rule 26 (expression -> [ element_list ] .)
    ,               reduce using rule 26 (expression -> [ element_list ] .)


state 53

    (28) element_list -> element_list , . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 65

state 54

    (33) expression -> ENTRADA ( ) .

    ;               reduce using rule 33 (expression -> ENTRADA ( ) .)
    +               reduce using rule 33 (expression -> ENTRADA ( ) .)
    -               reduce using rule 33 (expression -> ENTRADA ( ) .)
    *               reduce using rule 33 (expression -> ENTRADA ( ) .)
    /               reduce using rule 33 (expression -> ENTRADA ( ) .)
    CONCAT          reduce using rule 33 (expression -> ENTRADA ( ) .)
    )               reduce using rule 33 (expression -> ENTRADA ( ) .)
    ]               reduce using rule 33 (expression -> ENTRADA ( ) .)
    ,               reduce using rule 33 (expression -> ENTRADA ( ) .)


state 55

    (34) expression -> ALEATORIO ( expression . )
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    )               shift and go to state 66
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    CONCAT          shift and go to state 31


state 56

    (14) command_statement -> ALEATORIO ( ) ; .

    IDENTIFIER      reduce using rule 14 (command_statement -> ALEATORIO ( ) ; .)
    ESCREVER        reduce using rule 14 (command_statement -> ALEATORIO ( ) ; .)
    ALEATORIO       reduce using rule 14 (command_statement -> ALEATORIO ( ) ; .)
    FUNCAO          reduce using rule 14 (command_statement -> ALEATORIO ( ) ; .)
    $end            reduce using rule 14 (command_statement -> ALEATORIO ( ) ; .)


state 57

    (15) command_statement -> ALEATORIO ( expression ) . ;

    ;               shift and go to state 67


state 58

    (8) parameter_list -> IDENTIFIER .

    )               reduce using rule 8 (parameter_list -> IDENTIFIER .)
    ,               reduce using rule 8 (parameter_list -> IDENTIFIER .)


state 59

    (7) function_declaration -> FUNCAO IDENTIFIER ( parameter_list . ) , : expression ;
    (9) parameter_list -> parameter_list . , IDENTIFIER

    )               shift and go to state 68
    ,               shift and go to state 69


state 60

    (10) parameter_list -> empty .

    )               reduce using rule 10 (parameter_list -> empty .)
    ,               reduce using rule 10 (parameter_list -> empty .)


state 61

    (21) expression -> ( expression ) .

    ;               reduce using rule 21 (expression -> ( expression ) .)
    +               reduce using rule 21 (expression -> ( expression ) .)
    -               reduce using rule 21 (expression -> ( expression ) .)
    *               reduce using rule 21 (expression -> ( expression ) .)
    /               reduce using rule 21 (expression -> ( expression ) .)
    CONCAT          reduce using rule 21 (expression -> ( expression ) .)
    )               reduce using rule 21 (expression -> ( expression ) .)
    ]               reduce using rule 21 (expression -> ( expression ) .)
    ,               reduce using rule 21 (expression -> ( expression ) .)


state 62

    (12) command_statement -> ESCREVER ( expression ) ; .

    IDENTIFIER      reduce using rule 12 (command_statement -> ESCREVER ( expression ) ; .)
    ESCREVER        reduce using rule 12 (command_statement -> ESCREVER ( expression ) ; .)
    ALEATORIO       reduce using rule 12 (command_statement -> ESCREVER ( expression ) ; .)
    FUNCAO          reduce using rule 12 (command_statement -> ESCREVER ( expression ) ; .)
    $end            reduce using rule 12 (command_statement -> ESCREVER ( expression ) ; .)


state 63

    (25) expression -> IDENTIFIER ( argument_list ) .

    ;               reduce using rule 25 (expression -> IDENTIFIER ( argument_list ) .)
    +               reduce using rule 25 (expression -> IDENTIFIER ( argument_list ) .)
    -               reduce using rule 25 (expression -> IDENTIFIER ( argument_list ) .)
    *               reduce using rule 25 (expression -> IDENTIFIER ( argument_list ) .)
    /               reduce using rule 25 (expression -> IDENTIFIER ( argument_list ) .)
    CONCAT          reduce using rule 25 (expression -> IDENTIFIER ( argument_list ) .)
    )               reduce using rule 25 (expression -> IDENTIFIER ( argument_list ) .)
    ]               reduce using rule 25 (expression -> IDENTIFIER ( argument_list ) .)
    ,               reduce using rule 25 (expression -> IDENTIFIER ( argument_list ) .)


state 64

    (31) argument_list -> argument_list , . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 70

state 65

    (28) element_list -> element_list , expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    ]               reduce using rule 28 (element_list -> element_list , expression .)
    ,               reduce using rule 28 (element_list -> element_list , expression .)
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    CONCAT          shift and go to state 31


state 66

    (34) expression -> ALEATORIO ( expression ) .

    ;               reduce using rule 34 (expression -> ALEATORIO ( expression ) .)
    +               reduce using rule 34 (expression -> ALEATORIO ( expression ) .)
    -               reduce using rule 34 (expression -> ALEATORIO ( expression ) .)
    *               reduce using rule 34 (expression -> ALEATORIO ( expression ) .)
    /               reduce using rule 34 (expression -> ALEATORIO ( expression ) .)
    CONCAT          reduce using rule 34 (expression -> ALEATORIO ( expression ) .)
    )               reduce using rule 34 (expression -> ALEATORIO ( expression ) .)
    ]               reduce using rule 34 (expression -> ALEATORIO ( expression ) .)
    ,               reduce using rule 34 (expression -> ALEATORIO ( expression ) .)


state 67

    (15) command_statement -> ALEATORIO ( expression ) ; .

    IDENTIFIER      reduce using rule 15 (command_statement -> ALEATORIO ( expression ) ; .)
    ESCREVER        reduce using rule 15 (command_statement -> ALEATORIO ( expression ) ; .)
    ALEATORIO       reduce using rule 15 (command_statement -> ALEATORIO ( expression ) ; .)
    FUNCAO          reduce using rule 15 (command_statement -> ALEATORIO ( expression ) ; .)
    $end            reduce using rule 15 (command_statement -> ALEATORIO ( expression ) ; .)


state 68

    (7) function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) . , : expression ;

    ,               shift and go to state 71


state 69

    (9) parameter_list -> parameter_list , . IDENTIFIER

    IDENTIFIER      shift and go to state 72


state 70

    (31) argument_list -> argument_list , expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    )               reduce using rule 31 (argument_list -> argument_list , expression .)
    ,               reduce using rule 31 (argument_list -> argument_list , expression .)
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    CONCAT          shift and go to state 31


state 71

    (7) function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) , . : expression ;

    :               shift and go to state 73


state 72

    (9) parameter_list -> parameter_list , IDENTIFIER .

    )               reduce using rule 9 (parameter_list -> parameter_list , IDENTIFIER .)
    ,               reduce using rule 9 (parameter_list -> parameter_list , IDENTIFIER .)


state 73

    (7) function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) , : . expression ;
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression CONCAT expression
    (21) expression -> . ( expression )
    (22) expression -> . NUMBER
    (23) expression -> . STRING
    (24) expression -> . IDENTIFIER
    (25) expression -> . IDENTIFIER ( argument_list )
    (26) expression -> . [ element_list ]
    (33) expression -> . ENTRADA ( )
    (34) expression -> . ALEATORIO ( expression )

    (               shift and go to state 24
    NUMBER          shift and go to state 15
    STRING          shift and go to state 16
    IDENTIFIER      shift and go to state 17
    [               shift and go to state 18
    ENTRADA         shift and go to state 19
    ALEATORIO       shift and go to state 20

    expression                     shift and go to state 74

state 74

    (7) function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) , : expression . ;
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . CONCAT expression

    ;               shift and go to state 75
    +               shift and go to state 27
    -               shift and go to state 28
    *               shift and go to state 29
    /               shift and go to state 30
    CONCAT          shift and go to state 31


state 75

    (7) function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) , : expression ; .

    IDENTIFIER      reduce using rule 7 (function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) , : expression ; .)
    ESCREVER        reduce using rule 7 (function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) , : expression ; .)
    ALEATORIO       reduce using rule 7 (function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) , : expression ; .)
    FUNCAO          reduce using rule 7 (function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) , : expression ; .)
    $end            reduce using rule 7 (function_declaration -> FUNCAO IDENTIFIER ( parameter_list ) , : expression ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ; in state 43 resolved as shift
